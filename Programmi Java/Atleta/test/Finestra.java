
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author ITALO
 */
public class Finestra extends javax.swing.JFrame {
        ArrayList <Nuotatore> nuotatori=new ArrayList<>();
        ArrayList <Pallavolista> pallavolisti=new ArrayList<>();
        DefaultTableModel dtm1=new DefaultTableModel(new Object[]{"Nome","Età","Numero","Sesso","Tempo","Metri","Posizione"}, 0);
        DefaultTableModel dtm2=new DefaultTableModel(new Object[]{"Nome","Età","Numero","Sesso","Tempo","Squadra","Punti","Partite","Punti medi"}, 0);

    /**
     * Creates new form Finestra
     */
    public Finestra() {
        initComponents();
        jTable1.setModel(dtm1);
        jTable2.setModel(dtm2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        btnIns = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Nuotatori");

        jLabel2.setText("Pallavolista");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        btnIns.setText("Inserisci");
        btnIns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsActionPerformed(evt);
            }
        });

        jButton1.setText("Cancella");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Modifica");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(187, 187, 187)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(194, 194, 194))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(322, 322, 322)
                        .addComponent(btnIns, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(279, 279, 279)
                        .addComponent(jButton1)
                        .addGap(49, 49, 49)
                        .addComponent(jButton2)))
                .addContainerGap(84, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(33, 33, 33)
                .addComponent(btnIns)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(351, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsActionPerformed
        char sesso=' ';
        Object[] row;
        Date tempofor;
        String nome=JOptionPane.showInputDialog("Inserisci il nome dell'atleta");
        int eta=Integer.valueOf(JOptionPane.showInputDialog("Inserisci l'età dell'atleta"));
        int num=Integer.valueOf(JOptionPane.showInputDialog("Inserisci il numero dell'atleta"));
        Object[] options = {"M", "F"};
        Object selezione = JOptionPane.showInputDialog(null, "Seleziona il genere:", "Genere", JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
        if(selezione.equals("M")){
            sesso='M';
        }else{
            sesso='F';
        }
        options = new Object[]{"Nuotatore", "Pallavolista"};
        selezione = JOptionPane.showInputDialog(null, "Seleziona il tipo di atleta:", "Tipo", JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
        if(selezione.equals("Nuotatore")){
            String tempo=JOptionPane.showInputDialog("Inserisci il tempo migliore (mm:ss:SSS)");
            SimpleDateFormat sdf=new SimpleDateFormat("mm:ss:SSS");
            try {
                 tempofor = sdf.parse(tempo);
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(null, "Formato tempo non valido. Utilizzare il formato mm:ss:SSS", "Errore", JOptionPane.ERROR_MESSAGE);
                return;
            }
            sdf.format(tempofor);
            int metri=Integer.valueOf(JOptionPane.showInputDialog("Inserisci i metri che l'atleta ha fatto nel tempo migliore:"));
            int pos=Integer.valueOf(JOptionPane.showInputDialog("Inserisci la posizione nella classifica:"));
            Nuotatore nuotatore=new Nuotatore(nome, eta, num, sesso, tempofor, metri, pos);
            nuotatori.add(nuotatore);
            row=new Object[]{nome,eta,num,sesso,sdf.format(tempofor),metri,pos};
            dtm1.addRow(row);
        }else{
            String squadra=JOptionPane.showInputDialog("Inserisci la squadra in cui gioca l'atleta");
            int partite=Integer.valueOf(JOptionPane.showInputDialog("Inserisci il numero delle partite"));
            int punti=Integer.valueOf(JOptionPane.showInputDialog("Inserisci il numero di punti fatti nelle partite"));
            Pallavolista pallavolista=new Pallavolista(squadra, punti, partite, nome, eta, num, sesso);
            pallavolisti.add(pallavolista);
            row=new Object[]{nome,eta,num,sesso,squadra,punti,partite,pallavolista.mediaPunti()};
            dtm2.addRow(row);
            
        }
    }//GEN-LAST:event_btnInsActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(jTable1.getSelectedRow()!=-1){
            dtm1.removeRow(jTable1.getSelectedRow());
            nuotatori.get(jTable1.getSelectedRow());
        }
        if(jTable2.getSelectedRow()!=-1){
            dtm2.removeRow(jTable2.getSelectedRow());
            pallavolisti.get(jTable2.getSelectedRow());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if((jTable1.getSelectedRow()!=-1)&&(jTable1.getSelectedColumn()!=-1)){
            int row=jTable1.getSelectedRow();
            int col=jTable1.getSelectedColumn();
            switch (col) {
                case 0:
                    String nome=JOptionPane.showInputDialog("Inserisci il nome dell'atleta");
                    Nuotatore n=new Nuotatore(nome, nuotatori.get(row).eta, nuotatori.get(row).numeroGare, nuotatori.get(row).sesso, nuotatori.get(row).tempo, nuotatori.get(row).metri, nuotatori.get(row).pos);
                    break;
                case 1: // Età
                    int eta=Integer.parseInt(JOptionPane.showInputDialog("Inserisci l'età dell'atleta"));
                    nuotatori.get(row).setEta(eta);
                    dtm1.setValueAt(eta, row, col);
                    break;
                case 2: // Numero
                    int num=Integer.parseInt(JOptionPane.showInputDialog("Inserisci il numero dell'atleta"));
                    nuotatori.get(row).setNum(num);
                    dtm1.setValueAt(num, row, col);
                    break;
                case 3: // Sesso
                    String sesso=JOptionPane.showInputDialog("Inserisci il sesso dell'atleta (M/F)").toUpperCase();
                    nuotatori.get(row).setSesso(sesso.charAt(0));
                    dtm1.setValueAt(sesso, row, col);
                    break;
                case 4: // Tempo
                    String tempo=JOptionPane.showInputDialog("Inserisci il tempo migliore (mm:ss:SSS)");
                    SimpleDateFormat sdf=new SimpleDateFormat("mm:ss:SSS");
                    try {
                        Date tempofor = sdf.parse(tempo);
                        nuotatori.get(row).setTempo(tempofor);
                        dtm1.setValueAt(sdf.format(tempofor), row, col);
                    } catch (ParseException ex) {
                        JOptionPane.showMessageDialog(null, "Formato tempo non valido. Utilizzare il formato mm:ss:SSS", "Errore", JOptionPane.ERROR_MESSAGE);
                    }
                    break;
                case 5: // Metri
                    int metri=Integer.parseInt(JOptionPane.showInputDialog("Inserisci i metri che l'atleta ha fatto nel tempo migliore"));
                    nuotatori.get(row).setMetri(metri);
                    dtm1.setValueAt(metri, row, col);
                    break;
                case 6: // Posizione
                    int pos=Integer.parseInt(JOptionPane.showInputDialog("Inserisci la posizione dell'atleta nella classifica"));
                    nuotatori.get(row).setPos(pos);
                    dtm1.setValueAt(pos, row, col);
                    break;
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Finestra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Finestra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Finestra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Finestra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Finestra().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIns;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
